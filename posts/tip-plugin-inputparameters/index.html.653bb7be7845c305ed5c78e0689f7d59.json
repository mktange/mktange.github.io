{"head":{"layout":"Post","comments":true,"title":"Tip: Proper handling of Plugin InputParameters","subtitle":"The type-safe approach with intellisense","date":"2017-03-10T00:00:00.000Z","tags":["Tip","MsDynCRM","MsDyn365","Plugin"],"image":"plugin-inputparameters.png","description":"Retrieving information from the InputParameters collection from a plugin execution context can be a quite cumbersome task. The standard approach requires the need to know very specific magic strings, and casting of variables to a specific type. This is, in my opinion, not a very good or maintainable approach.  In my…"},"body":"<p>Retrieving information from the InputParameters collection from a plugin execution context can be a quite cumbersome task. The standard approach requires the need to know very specific <em>magic strings</em>, and casting of variables to a specific type. This is, in my opinion, not a very good or maintainable approach. </p>\n<p>In my quest to eliminate all uses of <em>magic strings</em> and <em>magic numbers</em> from my code, I have found a quite simple and neat solution to help with this issue, which I have not seen anyone else use so far.</p>\n<h1 id=\"the-standard-approach\"><a href=\"#the-standard-approach\" class=\"phenomic-HeadingAnchor\">#</a>The standard approach</h1>\n<p>The most commonly-used method is to do as shown in the <a href=\"https://msdn.microsoft.com/en-us/library/gg309673.aspx#Anchor_4\">MSDN docs</a>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">if</span> (context.InputParameters.Contains(<span class=\"hljs-string\">\"Target\"</span>) &#x26;&#x26;\n    context.InputParameters[<span class=\"hljs-string\">\"Target\"</span>] <span class=\"hljs-keyword\">is</span> Entity)\n{\n    <span class=\"hljs-comment\">// Obtain the target entity from the input parameters.</span>\n    Entity entity = (Entity)context.InputParameters[<span class=\"hljs-string\">\"Target\"</span>];\n}</code></pre>\n<div class=\"caption\">\n  Example of getting <code>\"Target\"</code> parameter when the operation is <b>Create</b>.\n</div>\n<p>In order to retrieve the target entity safely from the InputParameters collection, we have to go through quite a few checks and use the magic string <code>\"Target\"</code> a few times. The type of the retrieved value is also checked to be an <code>Entity</code>, before casting the value to that type.</p>\n<p>Now during a <strong>Delete</strong>-operation, there is also a <code>\"Target\"</code> in the InputParameters collection. This time, however, it has the type <code>EntityReference</code>:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-keyword\">if</span> (context.InputParameters.Contains(<span class=\"hljs-string\">\"Target\"</span>) &#x26;&#x26; \n    context.InputParameters[<span class=\"hljs-string\">\"Target\"</span>] <span class=\"hljs-keyword\">is</span> EntityReference)\n{\n    <span class=\"hljs-comment\">// Obtain the target entity reference from the input parameters.</span>\n    EntityReference entity = (EntityReference)context.InputParameters[<span class=\"hljs-string\">\"Target\"</span>];\n}</code></pre>\n<div class=\"caption\">\n  Example of getting <code>\"Target\"</code> parameter when the operation is <b>Delete</b>.\n</div>\n<p>Not only do you need to know the magic strings necessary to get any information from the InputParameters collection (in this case <code>\"Target\"</code>), but you also need to know the output type.\nThe above cases even show that the same key can even have different types depending on the event-operation — which can lead to great confusion and non-working code the first time you encounter it as a developer.</p>\n<p>One can quite quickly learn which parameters and types are present in the most basic operations (CRUD).\nBut when it comes to operations that you are not familiar, you have to look up the necessary magic strings and types online, and then use them correctly on the InputParameters collection. </p>\n<p>For example, can you tell me which parameters (along with their types) are available during a <strong>WinOpportunity</strong>-operation? Would you have to check online to figure it out?</p>\n<h1 id=\"the-type-safe-approach\"><a href=\"#the-type-safe-approach\" class=\"phenomic-HeadingAnchor\">#</a>The type-safe approach</h1>\n<p>This approach removes the need for any magic strings, automatically provides the type of each retrieved value, and even provides intellisense when retrieving the information available in the InputParameters collection.</p>\n<p>And best of all, it is actually very simple. You just create a request of the matching type and pass in the parameters:</p>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-comment\">/* If the operation is Create */</span>\n<span class=\"hljs-keyword\">var</span> createReq = <span class=\"hljs-keyword\">new</span> CreateRequest() { Parameters = context.InputParameters };\ncreateReq.Target; <span class=\"hljs-comment\">// Has type Entity</span></code></pre>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-comment\">/* If the operation is Delete */</span>\n<span class=\"hljs-keyword\">var</span> deleteReq = <span class=\"hljs-keyword\">new</span> DeleteRequest() { Parameters = context.InputParameters };\ndeleteReq.Target; <span class=\"hljs-comment\">// Has type EntityReference</span></code></pre>\n<pre><code class=\"hljs language-csharp\"><span class=\"hljs-comment\">/* If the operation is WinOpportunity */</span>\n<span class=\"hljs-keyword\">var</span> winOppReq = <span class=\"hljs-keyword\">new</span> WinOpportunityRequest() { Parameters = context.InputParameters };\nwinOppReq.OpportunityClose; <span class=\"hljs-comment\">// Has type Entity (OpportunityClose)</span>\nwinOppReq.Status; <span class=\"hljs-comment\">// Has type OptionSetValue</span></code></pre>\n<div class=\"caption\">\n  Examples of using the alternative approach to handle InputParameters from a plugin execution context.\n</div>\n<p>All standard SDK requests are found in either <code>Microsoft.Xrm.Sdk.Messages</code> or <code>Microsoft.Crm.Sdk.Messages</code>, so be sure to include those with a <code>using</code>-statement.</p>\n<p>Note that some requests can have \"hidden\" optional parameters, which are not defined as actual properties on the request. For example, <code>\"SolutionUniqueName\"</code> is a valid parameter for Create (<a href=\"https://msdn.microsoft.com/en-us/library/gg328075.aspx#bkmk_optional_params\">and a few others</a>), but is not a property on the <code>CreateRequest</code> class. Unfortunately, these still have to be accessed using the standard approach with magic strings and type-casting.</p>\n<p>This approach makes it much easier and simpler to safely handle InputParameters in plugin logic, and you (almost) never have to look up parameters for InputParameters again.</p>\n","rawBody":"\nRetrieving information from the InputParameters collection from a plugin execution context can be a quite cumbersome task. The standard approach requires the need to know very specific *magic strings*, and casting of variables to a specific type. This is, in my opinion, not a very good or maintainable approach. \n\nIn my quest to eliminate all uses of *magic strings* and *magic numbers* from my code, I have found a quite simple and neat solution to help with this issue, which I have not seen anyone else use so far.\n\n# The standard approach\n\nThe most commonly-used method is to do as shown in the [MSDN docs](https://msdn.microsoft.com/en-us/library/gg309673.aspx#Anchor_4):\n\n```csharp\nif (context.InputParameters.Contains(\"Target\") &&\n    context.InputParameters[\"Target\"] is Entity)\n{\n    // Obtain the target entity from the input parameters.\n    Entity entity = (Entity)context.InputParameters[\"Target\"];\n}\n```\n<div class=\"caption\">\n  Example of getting <code>\"Target\"</code> parameter when the operation is <b>Create</b>.\n</div>\n\nIn order to retrieve the target entity safely from the InputParameters collection, we have to go through quite a few checks and use the magic string `\"Target\"` a few times. The type of the retrieved value is also checked to be an `Entity`, before casting the value to that type.\n\nNow during a **Delete**-operation, there is also a `\"Target\"` in the InputParameters collection. This time, however, it has the type `EntityReference`:\n\n```csharp\nif (context.InputParameters.Contains(\"Target\") && \n    context.InputParameters[\"Target\"] is EntityReference)\n{\n    // Obtain the target entity reference from the input parameters.\n    EntityReference entity = (EntityReference)context.InputParameters[\"Target\"];\n}\n```\n<div class=\"caption\">\n  Example of getting <code>\"Target\"</code> parameter when the operation is <b>Delete</b>.\n</div>\n\nNot only do you need to know the magic strings necessary to get any information from the InputParameters collection (in this case `\"Target\"`), but you also need to know the output type.\nThe above cases even show that the same key can even have different types depending on the event-operation — which can lead to great confusion and non-working code the first time you encounter it as a developer.\n\nOne can quite quickly learn which parameters and types are present in the most basic operations (CRUD). \nBut when it comes to operations that you are not familiar, you have to look up the necessary magic strings and types online, and then use them correctly on the InputParameters collection. \n\nFor example, can you tell me which parameters (along with their types) are available during a **WinOpportunity**-operation? Would you have to check online to figure it out?\n\n\n\n\n# The type-safe approach\n\nThis approach removes the need for any magic strings, automatically provides the type of each retrieved value, and even provides intellisense when retrieving the information available in the InputParameters collection.\n\nAnd best of all, it is actually very simple. You just create a request of the matching type and pass in the parameters:\n\n```csharp\n/* If the operation is Create */\nvar createReq = new CreateRequest() { Parameters = context.InputParameters };\ncreateReq.Target; // Has type Entity\n```\n\n```csharp\n/* If the operation is Delete */\nvar deleteReq = new DeleteRequest() { Parameters = context.InputParameters };\ndeleteReq.Target; // Has type EntityReference\n```\n\n```csharp\n/* If the operation is WinOpportunity */\nvar winOppReq = new WinOpportunityRequest() { Parameters = context.InputParameters };\nwinOppReq.OpportunityClose; // Has type Entity (OpportunityClose)\nwinOppReq.Status; // Has type OptionSetValue\n```\n<div class=\"caption\">\n  Examples of using the alternative approach to handle InputParameters from a plugin execution context.\n</div>\n\nAll standard SDK requests are found in either `Microsoft.Xrm.Sdk.Messages` or `Microsoft.Crm.Sdk.Messages`, so be sure to include those with a `using`-statement.\n\nNote that some requests can have \"hidden\" optional parameters, which are not defined as actual properties on the request. For example, `\"SolutionUniqueName\"` is a valid parameter for Create ([and a few others](https://msdn.microsoft.com/en-us/library/gg328075.aspx#bkmk_optional_params)), but is not a property on the `CreateRequest` class. Unfortunately, these still have to be accessed using the standard approach with magic strings and type-casting.\n\nThis approach makes it much easier and simpler to safely handle InputParameters in plugin logic, and you (almost) never have to look up parameters for InputParameters again.\n","__filename":"posts/tip-plugin-inputparameters/index.md","__url":"/posts/tip-plugin-inputparameters/","__resourceUrl":"/posts/tip-plugin-inputparameters/index.html","__dataUrl":"/posts/tip-plugin-inputparameters/index.html.653bb7be7845c305ed5c78e0689f7d59.json"}